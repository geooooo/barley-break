/**
 * Определяет специфичные для задачи правила ее решения.
 *
 */
export default class Rules {

	/**
	 * Возвращает список состояний, в которые может быть осуществлен переход из
	 * указанного состояния.
	 *
	 * @param currentState текущее состояние, для которого раскрываются соседние.
	 * @return список состояний, в которые может быть осуществлен переход из
	 * казанного состояния.
	 */
	getNeighbors(currentState) {}

	/**
	 * Возвращает растояние между указанными состояниями.
	 *
	 * @param a первое состояние.
	 * @param b второе состояние.
	 * @return растояние между указанными состояниями.
	 */
	getDistance(a, b) {}

	/**
	 * Вычисляет эвристическую оценку расстояния от указанного состояния до
	 * конечного.
     *
	 * @param state текущее состояние.
	 * @return значение оценки расстояния от указанного состояния до конечного.
	 */
	getH(state) {}

	/**
	 * Проверяет состояние, не является ли оно конечным.
	 *
	 * @param state состояние.
	 * @return true, если состояние конечное.
	 */
	isTerminate(state) {}
}
